#!/usr/bin/env groovy
// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20' }
  environment {
    REPO = "azure-vm-extension"
    NOTIFY_TO = credentials('notify-to')
    PIPELINE_LOG_LEVEL = 'INFO'
    LANG = "C.UTF-8"
    LC_ALL = "C.UTF-8"
    HOME = "${env.WORKSPACE}"
    PATH = "${env.HOME}/bin:${env.PATH}"
    CLUSTER_NAME = "test-azure-${BUILD_ID}-${BRANCH_NAME}"
    ELASTIC_STACK_VERSION = '7.13.1'   // This should be a matrix
    TF_VAR_prefix = "${BRANCH_NAME}-${BUILD_ID}"
    TF_VAR_vmName = "${BRANCH_NAME}-${BUILD_ID}-vm"
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5', daysToKeepStr: '7'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    timeout(time: 2, unit: 'HOURS')
    disableConcurrentBuilds()
  }
  stages {
    stage('Checkout'){
      steps {
        deleteDir()
        checkout scm
      }
    }
    stage('Create cluster'){
      options { skipDefaultCheckout() }
      steps {
        withVaultEnv(){
          sh(label: 'Deploy Cluster', script: 'make -C .ci create-cluster')
        }
      }
      post {
        failure {
          destroyCluster()
        }
      }
    }
    stage('Prepare tools') {
      options { skipDefaultCheckout() }
      steps {
        withCloudEnv() {
          sh(label: 'Prepare tools', script: 'make -C .ci prepare')
        }
      }
      post {
        failure {
          destroyCluster()
        }
      }
    }
    stage('Terraform') {
      options { skipDefaultCheckout() }
      steps {
        withCloudEnv() {
          withAzEnv() {
            sh(label: 'Run terraform plan', script: 'make -C .ci terraform-run')
          }
        }
      }
      post {
        failure {
          destroyTerraform()
          destroyCluster()
        }
      }
    }
    stage('Validate') {
      options { skipDefaultCheckout() }
      steps {
        withValidationEnv() {
          sh(label: 'Validate', script: 'make -C .ci validate')
        }
      }
      post {
        failure {
          destroyTerraform()
          destroyCluster()
        }
      }
    }
    stage('Destroy cluster'){
      options { skipDefaultCheckout() }
      steps {
        destroyTerraform()
        destroyCluster()
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def destroyCluster( ) {
  withVaultEnv(){
    sh(label: 'Destroy Cluster', script: 'make -C .ci destroy-cluster')
  }
}

def destroyTerraform( ) {
  withCloudEnv() {
    withAzEnv() {
      sh(label: 'Destroy terraform plan', script: 'make -C .ci terraform-destroy')
    }
  }
}

def withVaultEnv(Closure body){
  getVaultSecret.readSecretWrapper {
    withEnvMask(vars: [
      [var: 'VAULT_ADDR', password: env.VAULT_ADDR],
      [var: 'VAULT_ROLE_ID', password: env.VAULT_ROLE_ID],
      [var: 'VAULT_SECRET_ID', password: env.VAULT_SECRET_ID],
      [var: 'VAULT_AUTH_METHOD', password: 'approle'],
      [var: 'VAULT_AUTHTYPE', password: 'approle']
    ]){
      body()
    }
  }
}

def withValidationEnv(Closure body) {
  def props = getVaultSecret(secret: "secret/observability-team/ci/test-clusters/${env.CLUSTER_NAME}/k8s-elasticsearch")
  if (props?.errors) {
    error "withValidationEnv: Unable to get credentials from the vault: ${props.errors.toString()}"
  }

  def esJson = props?.data.value
  def es = toJSON(esJson)
  def es_url = es.url
  def username = es.username
  def password = es.password
  if(es_url == null || username == null || password == null){
    error "withValidationEnv: was not possible to get the authentication info."
  }
  withEnvMask(vars: [
    [var: 'ES_URL', password: es_url],
    [var: 'ES_USERNAME', password: username],
    [var: 'ES_PASSWORD', password: password],
    [var: 'VM_NAME', password: "${env.TF_VAR_vmName}"]
  ]){
    body()
  }
}

def withCloudEnv(Closure body) {
  def props = getVaultSecret(secret: "secret/observability-team/ci/test-clusters/${env.CLUSTER_NAME}/ec-deployment")
  if (props?.errors) {
    error "withCloudEnv: Unable to get credentials from the vault: ${props.errors.toString()}"
  }
  def value = props?.data
  def cloud_id = value?.cloud_id
  def username = value?.username
  def password = value?.password
  if(cloud_id == null || username == null || password == null){
    error "withCloudEnv: was not possible to get the authentication info."
  }
  withEnvMask(vars: [
    [var: 'TF_VAR_username', password: username],
    [var: 'TF_VAR_password', password: password],
    [var: 'TF_VAR_cloudId', password: cloud_id]
  ]){
    body()
  }
}

def withAzEnv(Closure body) {
  def props = getVaultSecret(secret: 'secret/observability-team/ci/service-account/azure-vm-extension')
  if (props?.errors) {
    error "withAzEnv: Unable to get credentials from the vault: ${props.errors.toString()}"
  }
  def value = props?.data
  def tenant = value?.tenant
  def username = value?.username
  def password = value?.password
  def subscription = value?.subscription
  if(tenant == null || username == null || password == null || subscription == null){
    error "withAzEnv: was not possible to get the authentication info."
  }
  withEnvMask(vars: [
    [var: 'AZ_USERNAME', password: username],
    [var: 'AZ_PASSWORD', password: password],
    [var: 'AZ_TENANT', password: tenant],
    [var: 'AZ_SUBSCRIPTION', password: subscription]
  ]){
    body()
  }
}
